/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/profile": {
    get: {
      parameters: {
        query: {
          insertedAt?: parameters["rowFilter.profile.insertedAt"];
          updatedAt?: parameters["rowFilter.profile.updatedAt"];
          canLeadSessions?: parameters["rowFilter.profile.canLeadSessions"];
          firstName?: parameters["rowFilter.profile.firstName"];
          lastName?: parameters["rowFilter.profile.lastName"];
          userId?: parameters["rowFilter.profile.userId"];
          canManageShifts?: parameters["rowFilter.profile.canManageShifts"];
          email?: parameters["rowFilter.profile.email"];
          id?: parameters["rowFilter.profile.id"];
          hubspotContactId?: parameters["rowFilter.profile.hubspotContactId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profile"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profile */
          profile?: definitions["profile"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          insertedAt?: parameters["rowFilter.profile.insertedAt"];
          updatedAt?: parameters["rowFilter.profile.updatedAt"];
          canLeadSessions?: parameters["rowFilter.profile.canLeadSessions"];
          firstName?: parameters["rowFilter.profile.firstName"];
          lastName?: parameters["rowFilter.profile.lastName"];
          userId?: parameters["rowFilter.profile.userId"];
          canManageShifts?: parameters["rowFilter.profile.canManageShifts"];
          email?: parameters["rowFilter.profile.email"];
          id?: parameters["rowFilter.profile.id"];
          hubspotContactId?: parameters["rowFilter.profile.hubspotContactId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          insertedAt?: parameters["rowFilter.profile.insertedAt"];
          updatedAt?: parameters["rowFilter.profile.updatedAt"];
          canLeadSessions?: parameters["rowFilter.profile.canLeadSessions"];
          firstName?: parameters["rowFilter.profile.firstName"];
          lastName?: parameters["rowFilter.profile.lastName"];
          userId?: parameters["rowFilter.profile.userId"];
          canManageShifts?: parameters["rowFilter.profile.canManageShifts"];
          email?: parameters["rowFilter.profile.email"];
          id?: parameters["rowFilter.profile.id"];
          hubspotContactId?: parameters["rowFilter.profile.hubspotContactId"];
        };
        body: {
          /** profile */
          profile?: definitions["profile"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/room": {
    get: {
      parameters: {
        query: {
          /** Human readable name. */
          name?: parameters["rowFilter.room.name"];
          /** URL path to access this room. */
          slug?: parameters["rowFilter.room.slug"];
          /** Notion property. */
          slideshowName?: parameters["rowFilter.room.slideshowName"];
          /** Notion ID. */
          currentSlideIndex?: parameters["rowFilter.room.currentSlideIndex"];
          timerState?: parameters["rowFilter.room.timerState"];
          timerEndTimeUTC?: parameters["rowFilter.room.timerEndTimeUTC"];
          timerDuration?: parameters["rowFilter.room.timerDuration"];
          wherebyMeetingId?: parameters["rowFilter.room.wherebyMeetingId"];
          wherebyStartDate?: parameters["rowFilter.room.wherebyStartDate"];
          wherebyEndDate?: parameters["rowFilter.room.wherebyEndDate"];
          wherebyRoomUrl?: parameters["rowFilter.room.wherebyRoomUrl"];
          wherebyHostRoomUrl?: parameters["rowFilter.room.wherebyHostRoomUrl"];
          id?: parameters["rowFilter.room.id"];
          hubspotLeaderListId?: parameters["rowFilter.room.hubspotLeaderListId"];
          updatedAt?: parameters["rowFilter.room.updatedAt"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["room"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** room */
          room?: definitions["room"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          /** Human readable name. */
          name?: parameters["rowFilter.room.name"];
          /** URL path to access this room. */
          slug?: parameters["rowFilter.room.slug"];
          /** Notion property. */
          slideshowName?: parameters["rowFilter.room.slideshowName"];
          /** Notion ID. */
          currentSlideIndex?: parameters["rowFilter.room.currentSlideIndex"];
          timerState?: parameters["rowFilter.room.timerState"];
          timerEndTimeUTC?: parameters["rowFilter.room.timerEndTimeUTC"];
          timerDuration?: parameters["rowFilter.room.timerDuration"];
          wherebyMeetingId?: parameters["rowFilter.room.wherebyMeetingId"];
          wherebyStartDate?: parameters["rowFilter.room.wherebyStartDate"];
          wherebyEndDate?: parameters["rowFilter.room.wherebyEndDate"];
          wherebyRoomUrl?: parameters["rowFilter.room.wherebyRoomUrl"];
          wherebyHostRoomUrl?: parameters["rowFilter.room.wherebyHostRoomUrl"];
          id?: parameters["rowFilter.room.id"];
          hubspotLeaderListId?: parameters["rowFilter.room.hubspotLeaderListId"];
          updatedAt?: parameters["rowFilter.room.updatedAt"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          /** Human readable name. */
          name?: parameters["rowFilter.room.name"];
          /** URL path to access this room. */
          slug?: parameters["rowFilter.room.slug"];
          /** Notion property. */
          slideshowName?: parameters["rowFilter.room.slideshowName"];
          /** Notion ID. */
          currentSlideIndex?: parameters["rowFilter.room.currentSlideIndex"];
          timerState?: parameters["rowFilter.room.timerState"];
          timerEndTimeUTC?: parameters["rowFilter.room.timerEndTimeUTC"];
          timerDuration?: parameters["rowFilter.room.timerDuration"];
          wherebyMeetingId?: parameters["rowFilter.room.wherebyMeetingId"];
          wherebyStartDate?: parameters["rowFilter.room.wherebyStartDate"];
          wherebyEndDate?: parameters["rowFilter.room.wherebyEndDate"];
          wherebyRoomUrl?: parameters["rowFilter.room.wherebyRoomUrl"];
          wherebyHostRoomUrl?: parameters["rowFilter.room.wherebyHostRoomUrl"];
          id?: parameters["rowFilter.room.id"];
          hubspotLeaderListId?: parameters["rowFilter.room.hubspotLeaderListId"];
          updatedAt?: parameters["rowFilter.room.updatedAt"];
        };
        body: {
          /** room */
          room?: definitions["room"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/roompermission": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roompermission.id"];
          /** member | leader | manager */
          type?: parameters["rowFilter.roompermission.type"];
          updatedAt?: parameters["rowFilter.roompermission.updatedAt"];
          profileId?: parameters["rowFilter.roompermission.profileId"];
          roomId?: parameters["rowFilter.roompermission.roomId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["roompermission"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** roompermission */
          roompermission?: definitions["roompermission"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roompermission.id"];
          /** member | leader | manager */
          type?: parameters["rowFilter.roompermission.type"];
          updatedAt?: parameters["rowFilter.roompermission.updatedAt"];
          profileId?: parameters["rowFilter.roompermission.profileId"];
          roomId?: parameters["rowFilter.roompermission.roomId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.roompermission.id"];
          /** member | leader | manager */
          type?: parameters["rowFilter.roompermission.type"];
          updatedAt?: parameters["rowFilter.roompermission.updatedAt"];
          profileId?: parameters["rowFilter.roompermission.profileId"];
          roomId?: parameters["rowFilter.roompermission.roomId"];
        };
        body: {
          /** roompermission */
          roompermission?: definitions["roompermission"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/shiftallocation": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shiftallocation.id"];
          shiftPatternId?: parameters["rowFilter.shiftallocation.shiftPatternId"];
          profileId?: parameters["rowFilter.shiftallocation.profileId"];
          updatedAt?: parameters["rowFilter.shiftallocation.updatedAt"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["shiftallocation"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** shiftallocation */
          shiftallocation?: definitions["shiftallocation"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shiftallocation.id"];
          shiftPatternId?: parameters["rowFilter.shiftallocation.shiftPatternId"];
          profileId?: parameters["rowFilter.shiftallocation.profileId"];
          updatedAt?: parameters["rowFilter.shiftallocation.updatedAt"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shiftallocation.id"];
          shiftPatternId?: parameters["rowFilter.shiftallocation.shiftPatternId"];
          profileId?: parameters["rowFilter.shiftallocation.profileId"];
          updatedAt?: parameters["rowFilter.shiftallocation.updatedAt"];
        };
        body: {
          /** shiftallocation */
          shiftallocation?: definitions["shiftallocation"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/shiftexception": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shiftexception.id"];
          shiftPatternId?: parameters["rowFilter.shiftexception.shiftPatternId"];
          date?: parameters["rowFilter.shiftexception.date"];
          profileId?: parameters["rowFilter.shiftexception.profileId"];
          /** drop_out or drop_in */
          type?: parameters["rowFilter.shiftexception.type"];
          lastUpdated?: parameters["rowFilter.shiftexception.lastUpdated"];
          shiftAllocationId?: parameters["rowFilter.shiftexception.shiftAllocationId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["shiftexception"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** shiftexception */
          shiftexception?: definitions["shiftexception"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shiftexception.id"];
          shiftPatternId?: parameters["rowFilter.shiftexception.shiftPatternId"];
          date?: parameters["rowFilter.shiftexception.date"];
          profileId?: parameters["rowFilter.shiftexception.profileId"];
          /** drop_out or drop_in */
          type?: parameters["rowFilter.shiftexception.type"];
          lastUpdated?: parameters["rowFilter.shiftexception.lastUpdated"];
          shiftAllocationId?: parameters["rowFilter.shiftexception.shiftAllocationId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.shiftexception.id"];
          shiftPatternId?: parameters["rowFilter.shiftexception.shiftPatternId"];
          date?: parameters["rowFilter.shiftexception.date"];
          profileId?: parameters["rowFilter.shiftexception.profileId"];
          /** drop_out or drop_in */
          type?: parameters["rowFilter.shiftexception.type"];
          lastUpdated?: parameters["rowFilter.shiftexception.lastUpdated"];
          shiftAllocationId?: parameters["rowFilter.shiftexception.shiftAllocationId"];
        };
        body: {
          /** shiftexception */
          shiftexception?: definitions["shiftexception"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/shiftpattern": {
    get: {
      parameters: {
        query: {
          name?: parameters["rowFilter.shiftpattern.name"];
          required_people?: parameters["rowFilter.shiftpattern.required_people"];
          id?: parameters["rowFilter.shiftpattern.id"];
          roomId?: parameters["rowFilter.shiftpattern.roomId"];
          updatedAt?: parameters["rowFilter.shiftpattern.updatedAt"];
          cron?: parameters["rowFilter.shiftpattern.cron"];
          allowOneOffAllocations?: parameters["rowFilter.shiftpattern.allowOneOffAllocations"];
          cronTimezone?: parameters["rowFilter.shiftpattern.cronTimezone"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["shiftpattern"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** shiftpattern */
          shiftpattern?: definitions["shiftpattern"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          name?: parameters["rowFilter.shiftpattern.name"];
          required_people?: parameters["rowFilter.shiftpattern.required_people"];
          id?: parameters["rowFilter.shiftpattern.id"];
          roomId?: parameters["rowFilter.shiftpattern.roomId"];
          updatedAt?: parameters["rowFilter.shiftpattern.updatedAt"];
          cron?: parameters["rowFilter.shiftpattern.cron"];
          allowOneOffAllocations?: parameters["rowFilter.shiftpattern.allowOneOffAllocations"];
          cronTimezone?: parameters["rowFilter.shiftpattern.cronTimezone"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          name?: parameters["rowFilter.shiftpattern.name"];
          required_people?: parameters["rowFilter.shiftpattern.required_people"];
          id?: parameters["rowFilter.shiftpattern.id"];
          roomId?: parameters["rowFilter.shiftpattern.roomId"];
          updatedAt?: parameters["rowFilter.shiftpattern.updatedAt"];
          cron?: parameters["rowFilter.shiftpattern.cron"];
          allowOneOffAllocations?: parameters["rowFilter.shiftpattern.allowOneOffAllocations"];
          cronTimezone?: parameters["rowFilter.shiftpattern.cronTimezone"];
        };
        body: {
          /** shiftpattern */
          shiftpattern?: definitions["shiftpattern"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/http_delete": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            uri: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http_head": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            uri: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http_post": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            uri: string;
            /** Format: character varying */
            content: string;
            /** Format: character varying */
            content_type: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http_reset_curlopt": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http_put": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            uri: string;
            /** Format: character varying */
            content: string;
            /** Format: character varying */
            content_type: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http_header": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            field: string;
            /** Format: character varying */
            value: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http_patch": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            uri: string;
            /** Format: character varying */
            content: string;
            /** Format: character varying */
            content_type: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http_get": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            uri: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http_set_curlopt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            curlopt: string;
            /** Format: character varying */
            value: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/http": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: public.http_request */
            request: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/urlencode": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: character varying */
            string: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  profile: {
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    insertedAt: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updatedAt: string;
    /** Format: boolean */
    canLeadSessions: boolean;
    /** Format: text */
    firstName?: string;
    /** Format: text */
    lastName?: string;
    /** Format: uuid */
    userId?: string;
    /** Format: boolean */
    canManageShifts: boolean;
    /** Format: text */
    email: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    hubspotContactId?: string;
  };
  room: {
    /**
     * Format: text
     * @description Human readable name.
     */
    name: string;
    /**
     * Format: text
     * @description URL path to access this room.
     */
    slug: string;
    /**
     * Format: text
     * @description Notion property.
     * @default ADHD Together Group Session - Agenda 1
     */
    slideshowName: string;
    /**
     * Format: integer
     * @description Notion ID.
     */
    currentSlideIndex: number;
    /**
     * Format: text
     * @default stopped
     */
    timerState?: string;
    /** Format: timestamp with time zone */
    timerEndTimeUTC?: string;
    /** Format: bigint */
    timerDuration: number;
    /** Format: text */
    wherebyMeetingId?: string;
    /** Format: timestamp with time zone */
    wherebyStartDate?: string;
    /** Format: timestamp with time zone */
    wherebyEndDate?: string;
    /** Format: text */
    wherebyRoomUrl?: string;
    /** Format: text */
    wherebyHostRoomUrl?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: text */
    hubspotLeaderListId?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    updatedAt: string;
  };
  roompermission: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: text
     * @description member | leader | manager
     */
    type: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    profileId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    roomId: string;
  };
  shiftallocation: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `shiftpattern.id`.<fk table='shiftpattern' column='id'/>
     */
    shiftPatternId: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    profileId: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
  };
  shiftexception: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `shiftpattern.id`.<fk table='shiftpattern' column='id'/>
     */
    shiftPatternId: string;
    /** Format: timestamp with time zone */
    date: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profile.id`.<fk table='profile' column='id'/>
     */
    profileId: string;
    /**
     * Format: text
     * @description drop_out or drop_in
     */
    type: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    lastUpdated: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `shiftallocation.id`.<fk table='shiftallocation' column='id'/>
     */
    shiftAllocationId?: string;
  };
  shiftpattern: {
    /** Format: text */
    name: string;
    /**
     * Format: integer
     * @default 1
     */
    required_people: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `room.id`.<fk table='room' column='id'/>
     */
    roomId: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    updatedAt: string;
    /** Format: text */
    cron: string;
    /** Format: boolean */
    allowOneOffAllocations: boolean;
    /** Format: text */
    cronTimezone: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description profile */
  "body.profile": definitions["profile"];
  /** Format: timestamp with time zone */
  "rowFilter.profile.insertedAt": string;
  /** Format: timestamp with time zone */
  "rowFilter.profile.updatedAt": string;
  /** Format: boolean */
  "rowFilter.profile.canLeadSessions": string;
  /** Format: text */
  "rowFilter.profile.firstName": string;
  /** Format: text */
  "rowFilter.profile.lastName": string;
  /** Format: uuid */
  "rowFilter.profile.userId": string;
  /** Format: boolean */
  "rowFilter.profile.canManageShifts": string;
  /** Format: text */
  "rowFilter.profile.email": string;
  /** Format: uuid */
  "rowFilter.profile.id": string;
  /** Format: text */
  "rowFilter.profile.hubspotContactId": string;
  /** @description room */
  "body.room": definitions["room"];
  /**
   * Format: text
   * @description Human readable name.
   */
  "rowFilter.room.name": string;
  /**
   * Format: text
   * @description URL path to access this room.
   */
  "rowFilter.room.slug": string;
  /**
   * Format: text
   * @description Notion property.
   */
  "rowFilter.room.slideshowName": string;
  /**
   * Format: integer
   * @description Notion ID.
   */
  "rowFilter.room.currentSlideIndex": string;
  /** Format: text */
  "rowFilter.room.timerState": string;
  /** Format: timestamp with time zone */
  "rowFilter.room.timerEndTimeUTC": string;
  /** Format: bigint */
  "rowFilter.room.timerDuration": string;
  /** Format: text */
  "rowFilter.room.wherebyMeetingId": string;
  /** Format: timestamp with time zone */
  "rowFilter.room.wherebyStartDate": string;
  /** Format: timestamp with time zone */
  "rowFilter.room.wherebyEndDate": string;
  /** Format: text */
  "rowFilter.room.wherebyRoomUrl": string;
  /** Format: text */
  "rowFilter.room.wherebyHostRoomUrl": string;
  /** Format: uuid */
  "rowFilter.room.id": string;
  /** Format: text */
  "rowFilter.room.hubspotLeaderListId": string;
  /** Format: timestamp with time zone */
  "rowFilter.room.updatedAt": string;
  /** @description roompermission */
  "body.roompermission": definitions["roompermission"];
  /** Format: uuid */
  "rowFilter.roompermission.id": string;
  /**
   * Format: text
   * @description member | leader | manager
   */
  "rowFilter.roompermission.type": string;
  /** Format: timestamp with time zone */
  "rowFilter.roompermission.updatedAt": string;
  /** Format: uuid */
  "rowFilter.roompermission.profileId": string;
  /** Format: uuid */
  "rowFilter.roompermission.roomId": string;
  /** @description shiftallocation */
  "body.shiftallocation": definitions["shiftallocation"];
  /** Format: uuid */
  "rowFilter.shiftallocation.id": string;
  /** Format: uuid */
  "rowFilter.shiftallocation.shiftPatternId": string;
  /** Format: uuid */
  "rowFilter.shiftallocation.profileId": string;
  /** Format: timestamp with time zone */
  "rowFilter.shiftallocation.updatedAt": string;
  /** @description shiftexception */
  "body.shiftexception": definitions["shiftexception"];
  /** Format: uuid */
  "rowFilter.shiftexception.id": string;
  /** Format: uuid */
  "rowFilter.shiftexception.shiftPatternId": string;
  /** Format: timestamp with time zone */
  "rowFilter.shiftexception.date": string;
  /** Format: uuid */
  "rowFilter.shiftexception.profileId": string;
  /**
   * Format: text
   * @description drop_out or drop_in
   */
  "rowFilter.shiftexception.type": string;
  /** Format: timestamp with time zone */
  "rowFilter.shiftexception.lastUpdated": string;
  /** Format: uuid */
  "rowFilter.shiftexception.shiftAllocationId": string;
  /** @description shiftpattern */
  "body.shiftpattern": definitions["shiftpattern"];
  /** Format: text */
  "rowFilter.shiftpattern.name": string;
  /** Format: integer */
  "rowFilter.shiftpattern.required_people": string;
  /** Format: uuid */
  "rowFilter.shiftpattern.id": string;
  /** Format: uuid */
  "rowFilter.shiftpattern.roomId": string;
  /** Format: timestamp with time zone */
  "rowFilter.shiftpattern.updatedAt": string;
  /** Format: text */
  "rowFilter.shiftpattern.cron": string;
  /** Format: boolean */
  "rowFilter.shiftpattern.allowOneOffAllocations": string;
  /** Format: text */
  "rowFilter.shiftpattern.cronTimezone": string;
}

export interface operations {}

export interface external {}
